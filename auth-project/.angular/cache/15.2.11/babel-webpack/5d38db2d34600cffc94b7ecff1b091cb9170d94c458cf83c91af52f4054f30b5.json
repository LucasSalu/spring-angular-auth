{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { API_PATH } from 'src/enviroments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VacanciesService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = API_PATH;\n  }\n  getVacancies() {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs/${id}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get(loginUrl, {\n      headers\n    }); // Passando um objeto vazio como corpo da requisição\n  }\n\n  getMyVacancies() {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get(loginUrl, {\n      headers\n    }); // Passando um objeto vazio como corpo da requisição\n  }\n\n  getVacanciesAdm() {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs/adm/${id}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get(loginUrl, {\n      headers\n    }); // Passando um objeto vazio como corpo da requisição\n  }\n\n  deleteVacancy(vacancyId) {\n    const token = localStorage.getItem('token');\n    const deleteUrl = `${this.baseUrl}/jobs/${vacancyId}`;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}` // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.delete(deleteUrl, {\n      headers\n    });\n  }\n  updateOrCreate(id, title, description, requirements) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const createdBy = localStorage.getItem(\"id\");\n    const vacancy = {\n      title,\n      description,\n      requirements\n    };\n    if (id) {\n      // Atualiza vaga existente\n      const updateUrl = `${this.baseUrl}/jobs/${id}`;\n      return this.httpClient.put(updateUrl, vacancy, {\n        headers\n      });\n    } else {\n      const vacancy = {\n        title,\n        description,\n        requirements,\n        createdBy,\n        'isActive': true\n      };\n      // Cria nova vaga\n      const createUrl = `${this.baseUrl}/jobs`;\n      return this.httpClient.post(createUrl, vacancy, {\n        headers\n      });\n    }\n  }\n  static {\n    this.ɵfac = function VacanciesService_Factory(t) {\n      return new (t || VacanciesService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VacanciesService,\n      factory: VacanciesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","API_PATH","VacanciesService","constructor","httpClient","getVacancies","token","localStorage","getItem","id","loginUrl","baseUrl","headers","get","getMyVacancies","getVacanciesAdm","deleteVacancy","vacancyId","deleteUrl","delete","updateOrCreate","title","description","requirements","createdBy","vacancy","updateUrl","put","createUrl","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\dev\\projetos\\angular\\auth-project\\src\\app\\service\\vacancies\\vacancies.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { API_PATH } from 'src/enviroments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VacanciesService {\n  baseUrl= API_PATH;\n  constructor(private httpClient:HttpClient) { }\n\n  getVacancies(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs/${id}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`  // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get<any>(loginUrl,{ headers });  // Passando um objeto vazio como corpo da requisição\n  }\n\n  getMyVacancies(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`  // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get<any>(loginUrl,{ headers });  // Passando um objeto vazio como corpo da requisição\n  }\n\n  getVacanciesAdm(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const id = localStorage.getItem('id');\n    const loginUrl = `${this.baseUrl}/jobs/adm/${id}`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`  // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.get<any>(loginUrl,{ headers });  // Passando um objeto vazio como corpo da requisição\n  }\n\n\n\n  deleteVacancy(vacancyId: number): Observable<any> {\n    const token = localStorage.getItem('token');\n    const deleteUrl = `${this.baseUrl}/jobs/${vacancyId}`;\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`  // Adicionando o token no cabeçalho\n    });\n\n    return this.httpClient.delete<any>(deleteUrl, { headers });\n  }\n\n\n  updateOrCreate(id: number | undefined, title: string, description: string, requirements: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n    });\n    const createdBy = localStorage.getItem(\"id\");\n    const vacancy = { title, description, requirements };\n\n    if (id) {\n        // Atualiza vaga existente\n        const updateUrl = `${this.baseUrl}/jobs/${id}`;\n        return this.httpClient.put<any>(updateUrl, vacancy, { headers });\n    } else {\n          const vacancy = { title, description, requirements, createdBy, 'isActive' :true};\n        // Cria nova vaga\n        const createUrl = `${this.baseUrl}/jobs`;\n        return this.httpClient.post<any>(createUrl, vacancy, { headers });\n    }\n}\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}