{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/login.service\";\nexport class GuardsGuard {\n  constructor(router, loginService) {\n    this.router = router;\n    this.loginService = loginService;\n  }\n  canActivate(route, state) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return this.loginService.isValidToken(token).toPromise() // Aguarda a validação do token\n      .then(response => {\n        if (response) {\n          return true;\n        } else {\n          this.router.navigate(['index']);\n          return false;\n        }\n      }).catch(err => {\n        console.error('Erro ao validar token:', err);\n        this.router.navigate(['index']);\n        return false;\n      });\n    }\n    this.router.navigate(['index']);\n    return false;\n  }\n  static {\n    this.ɵfac = function GuardsGuard_Factory(t) {\n      return new (t || GuardsGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GuardsGuard,\n      factory: GuardsGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EACtBC,YAAoBC,MAAa,EAAUC,YAA0B;IAAjD,WAAM,GAAND,MAAM;IAAiB,iBAAY,GAAZC,YAAY;EAEvD;EAEAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT,OAAO,IAAI,CAACJ,YAAY,CAACO,YAAY,CAACH,KAAK,CAAC,CAACI,SAAS,EAAE,CAAE;MAAA,CACvDC,IAAI,CAACC,QAAQ,IAAG;QACf,IAAIA,QAAQ,EAAE;UACZ,OAAO,IAAI;SACZ,MAAM;UACL,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;UAC/B,OAAO,KAAK;;MAEhB,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAG;QACXC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;QAC5C,IAAI,CAACd,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,KAAK;MACd,CAAC,CAAC;;IAGN,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd;;;uBA3BWd,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAmB,SAAXnB,WAAW;MAAAoB,YAFV;IAAM;EAAA","names":["GuardsGuard","constructor","router","loginService","canActivate","route","state","token","localStorage","getItem","isValidToken","toPromise","then","response","navigate","catch","err","console","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\dev\\projetos\\angular\\auth-project\\src\\app\\guards\\guards.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from '../service/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardsGuard implements CanActivate {\n  constructor(private router:Router, private loginService: LoginService){\n\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      return this.loginService.isValidToken(token).toPromise()  // Aguarda a validação do token\n        .then(response => {\n          if (response) {\n            return true;\n          } else {\n            this.router.navigate(['index']);\n            return false;\n          }\n        })\n        .catch(err => {\n          console.error('Erro ao validar token:', err);\n          this.router.navigate(['index']);\n          return false;\n        });\n    }\n\n    this.router.navigate(['index']);\n    return false;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}