{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/login.service\";\nexport class LoginGuard {\n  constructor(router, loginService) {\n    this.router = router;\n    this.loginService = loginService;\n  }\n  canActivate(route, state) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.loginService.isValidToken(token).subscribe({\n        next: response => {\n          if (response) {\n            return true;\n          } else {\n            this.router.navigate(['index']);\n            return false;\n          }\n        },\n        error: err => {\n          console.error('Erro ao validar token:', err);\n          this.router.navigate(['index']);\n          return false;\n        }\n      });\n    } else {\n      this.router.navigate(['index']);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function LoginGuard_Factory(t) {\n      return new (t || LoginGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginGuard,\n      factory: LoginGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,MAAa,EAAUC,YAA0B;IAAjD,WAAM,GAAND,MAAM;IAAiB,iBAAY,GAAZC,YAAY;EAEvD;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACT,IAAI,CAACJ,YAAY,CAACO,YAAY,CAACH,KAAK,CAAC,CAACI,SAAS,CAAC;QAC9CC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAIA,QAAQ,EAAE;YACZ,OAAO,IAAI;WACZ,MAAM;YACL,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;YAC/B,OAAO,KAAK;;QAEhB,CAAC;QACDC,KAAK,EAAGC,GAAG,IAAI;UACbC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;UAC5C,IAAI,CAACd,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;UAC/B,OAAO,KAAK;QACd;OACD,CAAC;KACH,MAAM;MACL,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;;EAEhB;;;uBA3BWd,UAAU;IAAA;EAAA;;;aAAVA,UAAU;MAAAkB,SAAVlB,UAAU;MAAAmB,YAFT;IAAM;EAAA","names":["LoginGuard","constructor","router","loginService","canActivate","route","state","token","localStorage","getItem","isValidToken","subscribe","next","response","navigate","error","err","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\dev\\projetos\\angular\\auth-project\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from '../service/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n  constructor(private router:Router, private loginService: LoginService){\n\n  }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      this.loginService.isValidToken(token).subscribe({\n        next: (response) => {\n          if (response) {\n            return true;\n          } else {\n            this.router.navigate(['index']);\n            return false;\n          }\n        },\n        error: (err) => {\n          console.error('Erro ao validar token:', err);\n          this.router.navigate(['index']);\n          return false;\n        }\n      });\n    } else {\n      this.router.navigate(['index']);\n      return false;\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}